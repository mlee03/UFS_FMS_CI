#!/bin/bash

#: ./run_ufs_model -h 
#: TODO:  options for DISKNM to specify different baseline


#: rt.sh variables
scratch=/work/noaa/gfdlscr/$USER
user=$USER
queue="  QUEUE=windfall"
compile_queue="  COMPILE_QUEUE=batch"
accnr="  ACCNR=gfdlhires"
disknm=''


#: defaults
ufs_model='https://github.com/ufs-community/ufs-weather-model.git'
ufsbranch='develop'
fmsbranch='DEFAULT'
topdir=$scratch/WM_$(env TZ=America/New_York date +"%m_%d_%y_%H.%M.%S")
thisscript=$PWD #: dont change me

#: get user-defined arguments 
while getopts "a:u:d:c:f:m:qh" myopts ; do
    case ${myopts} in 
	a) ufs_model=${OPTARG}   ;;
	d) topdir=${OPTARG}      ;;
	f) fmsbranch=${OPTARG}   ;; 
	m) log_message=${OPTARG} ;;
	u) ufsbranch=${OPTARG}   ;;
	h)
	    echo -e "\n USAGE"
	    echo    " ./run_rts.sh -d directory -a repo_address -b ufsbranch -c conf_file -m message"
	    echo    " -d directory:   user-specified work directory" 
	    echo    " -a address:     UFS repo address to checkout from GitHub"
	    echo    " -u ufsbranch:   UFS branch/tag to checkout from GitHub"
	    echo    " -f fmsbranch:   FMS branch/tag to switch"
	    echo -e " -m message:     Message to print in log \n"
	    echo    " Will default to  "
	    echo    "      REPO      $ufs_model"	    
	    echo    "      UFSBRANCH $ufsbranch"
	    echo    "      FMSBRANCH DEFAULT"
	    echo    "      TOPDIR    $topdir"
	    echo    "      RT.SH     $topdir/ufs-weather-model/tests/rt.sh"
	    echo -e "      RT.CONF   $topdir/ufs-weather-model/tests/rt.conf \n"
	    exit ;;
    esac
done


#: change stmp and ptmp location to be inside workdir
stmp="  STMP=$topdir/stmp4"
ptmp="  PTMP=$topdir/stmp2"


#: LOG
log=$topdir/LOG
mkdir -p $topdir && cd $topdir
echo -e "  work in progress in directory \n\t $topdir"
echo -e "  LOG file generated in \n\t $topdir"


#: LOG
touch -a $log
echo `env TZ=America/New_York date`  >> $log 
echo ''                              >> $log
echo    "UFS REPOSITORY  $ufs_model" >> $log
echo    "UFS BRANCH      $ufsbranch"      >> $log
echo    "FMS BRANCH      $fmsbranch"      >> $log
echo -e "MESSAGE         $log_message\n"  >> $log


#: set workdir and bcnhmarkdir
baselinedir=$topdir/benchmark
workdir=$topdir/ufs-weather-model


#: benchmark branch set to develop
echo "CLONING BENCHMARK" >> $log
echo "git clone --recursive --branch develop $ufs_model benchmark" >> $log
echo "*************************************"                  >> $log
(git clone --recursive --branch develop $ufs_model benchmark) >> $log 2>&1
echo -e "*************************************\n"             >> $log
#: clone UFS weather model
echo "CLONING" >> $log
echo "git clone --recursive --branch $ufsbranch $ufs_model"      >> $log
echo "*************************************"                     >> $log
(git clone --recursive --branch $ufsbranch $ufs_model)           >> $log 2>&1
if [ $fmsbranch != 'DEFAULT' ] ; then
    (cd $workdir/FMS && git checkout $fmsbranch && cd $workdir ) >> $log 2>&1
fi


#: script to compare output files
cp $thisscript/check_results.sh $topdir/check_results.sh
sed -i "s:CHANGEME_WORKDIR:$workdir/tests:" $topdir/check_results.sh
sed -i "s:CHANGEME_BASELINE:$baselinedir/tests:" $topdir/check_results.sh
chmod +x $topdir/check_results.sh


for mydir in "$workdir/tests" "$baselinedir/tests" ; do

    echo "" >> $log

    #: check to see if the workflow script exists
    if [ -f $mydir/rt.sh ] ; then
	workfile=$mydir/rt.sh
	echo "rt.sh:   $workfile" >> $log
    else
	echo "rt.sh:  CANNOT FIND rt.sh in $mydir.  GOODBYE!" >> $log
	exit
    fi

    #: check to see if *.conf file exists 
    if [ -f $mydir/rt.conf ] ; then    
	conf_file=$mydir/rt.conf
	echo -e "rt.conf: $conf_file\n" >> $log
    else
	echo "rt.conf:  CANNOT FIND $conf_file in $mydir.  GOODBYE!" >> $log
	exit
    fi

    #: edit rt.sh
    cp $workfile $workfile.ORIGINAL
    
    #: change account info for line number: bound1 < line number < bound2
    bound1=$( grep -m 1 -n 'MACHINE_ID = orion' $workfile | cut -d: -f1 )
    bound2=$( grep -m 1 -n 'MACHINE_ID = jet'   $workfile | cut -d: -f1 )

    #: change QUEUE
    changeme=$( sed -n "${bound1},${bound2}p"    $workfile | grep -m 1 "QUEUE" )
    sed -i "$bound1,$bound2 s/$changeme/$queue/" $workfile
    
    #: change COMPILE_QUEUE
    changeme=$( sed -n "${bound1},${bound2}p"            $workfile | grep "COMPILE_QUEUE" )
    sed -i "$bound1,$bound2 s/$changeme/$compile_queue/" $workfile
    
    #: change ACCNR
    changeme=$( sed -n "${bound1},${bound2}p"    $workfile | grep "ACCNR" )
    sed -i "$bound1,$bound2 s/$changeme/$accnr/" $workfile
    
    #: change STMP
    changeme=$( sed -n "${bound1},${bound2}p"   $workfile | grep "STMP" )
    sed -i "$bound1,$bound2 s:$changeme:$stmp:" $workfile
    
    #: change PTMP
    changeme=$( sed -n "${bound1},${bound2}p"   $workfile | grep "PTMP" )
    sed -i "$bound1,$bound2 s:$changeme:$ptmp:" $workfile
    
    #: LOG
    #echo "NEW ACC INFO"                               >> $log
    #echo "*************************************"      >> $log
    #sed -n "${bound1},${bound2}p" $workfile           >> $log
    #echo -e "*************************************"   >> $log
    
    #: stophere without running
    echo "EXITING.  TO RUN REGRESSION TESTS"
    echo "nohup $workfile -s -k -l $conf_file &"
    
done

#: summarize results
echo    "*************************************" >> $log
echo    "*************************************" >> $log
echo    "RESULTS"                               >> $log


#: total number of regression tests
nlogs=$( ls $workdir/log_orion.intel/rt*.log | grep -c ".log" )
echo " NUMBER OF REGRESSION TESTS:  $nlogs " 


#: grep results from rt*.log
for ilog in $workdir/log_orion.intel/rt*.log ; do
    tail -n 2 $ilog | head -n 1 | awk '{printf "%-5s %-5s %-5s %10s\n", $1, $2, $4, $3}' >> $log
done


#: end
echo    "*************************************" >> $log
echo    "*************************************" >> $log
echo `env TZ=America/New_York date`  >> $log

