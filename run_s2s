#!/bin/bash

#: ./run_s2s.sh -h 
#: TODO:  options for DISKNM to specify baseline


#: rt.sh variables
scratch=/work/noaa/gfdlscr/$USER
user=$USER
queue="  QUEUE=windfall"
compile_queue="  COMPILE_QUEUE=batch"
accnr="  ACCNR=gfdlhires"
disknm=''


#: defaults
ufs_model='https://github.com/ufs-community/ufs-s2s-model.git'
ufsbranch='develop'
fmsbranch='DEFAULT'
conf_file='rt.conf'
workdir=$scratch/S2S_$(env TZ=America/New_York date +"%m_%d_%y_%H.%M.%S")
stophere=FALSE

#: get user-defined arguments 
while getopts "a:u:f:d:c:m:qh" myopts ; do
    case ${myopts} in 
	a) ufs_model=${OPTARG}   ;;
	d) workdir=${OPTARG}     ;;
	c) conf_file=${OPTARG}   ;;
	f) fmsbranch=${OPTARG}   ;;
	m) log_message=${OPTARG} ;;
	q) stophere=TRUE         ;;
	u) ufsbranch=${OPTARG}   ;;
	h)
	    echo -e "\n USAGE"
	    echo    " ./run_rts.sh -d directory -a repo_address -b ufsbranch -c conf_file -m message"
	    echo    " -d directory:   user-specified work directory" 
	    echo    " -c conf_file:   rt.conf"
	    echo    " -a address:     UFS repo address to checkout from GitHub"
	    echo    " -u ufsbranch:   UFS branch/tag to checkout from GitHub"
	    echo    " -f fmsbranch:   FMS branch/tag to checkout"
	    echo -e " -m message:     Message to print in log \n"
	    echo    " Will default to  "
	    echo    "      REPO      $ufs_model"
	    echo    "      UFSBRANCH $ufsbranch"
	    echo    "      FMSBRANCH DEFAULT"
	    echo    "      WORKDIR   $workdir"
	    echo    "      RT.SH     $workdir/ufs-s2s-model/tests/rt.sh"
	    echo -e "      RT.CONF   $workdir/ufs-s2s-model/tests/$conf_file\n"
	    exit ;;
    esac
done


#: change stmp and ptmp location to be inside workdir
stmp="  STMP=$workdir/stmp4"
ptmp="  PTMP=$workdir/stmp2"


#: LOG
log=$workdir/LOG
mkdir -p $workdir && cd $workdir
echo "  work in progress in directory $workdir"
echo "  LOG file generated in $workdir"


#: LOG
touch -a $log
echo `env TZ=America/New_York date`  >> $log 
echo ''                              >> $log
echo    "UFS REPOSITORY  $ufs_model" >> $log
echo    "UFS BRANCH      $ufsbranch"     >> $log
echo    "FMS BRANCH      $fmsbranch"     >> $log 
echo -e "MESSAGE         $log_message\n" >> $log


#: change workdir
workdir=$workdir/ufs-s2s-model


#: clone UFS weather model
echo "CLONING" >> $log
echo "git clone --recursive --branch $ufsbranch $ufs_model" >> $log
echo "*************************************"                >> $log
(git clone --recursive --branch $ufsbranch $ufs_model)      >> $log 2>&1
if [ $fmsbranch != 'DEFAULT' ] ; then
    (cd $workdir/FMS && git checkout $fmsbranch)            >> $log 2>&1
fi
echo -e "*************************************\n"           >> $log


#: change workdir
workdir=$workdir/tests
cd $workdir


#: check to see if workflow script exists
if [ -f $workdir/rt.sh ] ; then
    workfile=$workdir/rt.sh
    echo "rt.sh:   $workfile" >> $log
else
    echo "rt.sh:  CANNOT FIND rt.sh in $workdir.  GOODBYE!" >> $log
    exit
fi


#: check to see if *.conf file exists 
if [ -f $workdir/$conf_file ] ; then    
    conf_file=$workdir/$conf_file
    echo -e "rt.conf: $conf_file\n" >> $log
else
    echo "rt.conf:  CANNOT FIND $conf_file in $workdir.  GOODBYE!" >> $log
    exit
fi


#: edit rt.sh
cp $workfile $workfile.ORIGINAL


#: change account info for line number: bound1 < line number < bound2
bound1=$( grep -m 1 -n 'MACHINE_ID = orion'  $workfile | cut -d: -f1 )
bound2=$( grep -m 1 -n 'MACHINE_ID = jet'    $workfile | cut -d: -f1 )

#: log
echo   " OLD ACC INFO"                            >> $log
echo    "*************************************"   >> $log
sed -n  "${bound1},${bound2}p" $workfile          >> $log
echo -e "*************************************\n" >> $log

#: change QUEUE
changeme=$( sed -n "${bound1},${bound2}p"    $workfile | grep -m 1 "QUEUE" )
sed -i "$bound1,$bound2 s/$changeme/$queue/" $workfile

#: change COMPILE_QUEUE
changeme=$( sed -n "${bound1},${bound2}p"            $workfile | grep "COMPILE_QUEUE" )
sed -i "$bound1,$bound2 s/$changeme/$compile_queue/" $workfile

#: change ACCNR
changeme=$( sed -n "${bound1},${bound2}p"    $workfile | grep "ACCNR" )
sed -i "$bound1,$bound2 s/$changeme/$accnr/" $workfile

#: change STMP
changeme=$( sed -n "${bound1},${bound2}p"   $workfile | grep "STMP" )
sed -i "$bound1,$bound2 s:$changeme:$stmp:" $workfile

#: change PTMP
changeme=$( sed -n "${bound1},${bound2}p"   $workfile | grep "PTMP" )
sed -i "$bound1,$bound2 s:$changeme:$ptmp:" $workfile


#: LOG
echo "NEW ACC INFO"                               >> $log
echo "*************************************"      >> $log
sed -n "${bound1},${bound2}p" $workfile           >> $log
echo -e "*************************************\n" >> $log


#: stophere without running
if [ $stophere == 'TRUE' ] ; then
    echo "EXITING.  TO RUN REGRESSION TESTS"
    echo "$workfile -s -l $conf_file"
    exit
fi


#: run regression tests
echo    "RUNNING $workfile"                                >> $log
echo    "SEE     $workdir/log_hera.intel for job progress" >> $log
echo    "*************************************"            >> $log
echo -e "*************************************\n"          >> $log
($workfile -s -l $conf_file)                               >> $log 2>&1


#: summarize results
echo    "*************************************" >> $log
echo    "*************************************" >> $log
echo    "RESULTS"                               >> $log


#: total number of regression tests
nlogs=$( ls $workdir/log_orion.intel/rt*.log | grep -c ".log" )
echo " NUMBER OF REGRESSION TESTS:  $nlogs "


#: grep results from rt*.log
for ilog in $workdir/log_orion.intel/rt*.log ; do
    tail -n 2 $ilog | head -n 1 | awk '{printf "%-5s %-5s %-5s %10s\n", $1, $2, $4, $3}' >> $log
done


#: end
echo    "*************************************" >> $log
echo    "*************************************" >> $log
echo `env TZ=America/New_York date`  >> $log
